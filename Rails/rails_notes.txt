Rails is a web framework.
Framework is a set of code libraries and data structures that provide generic functionality that can be used , overridden , or further specialized.

There are mainly 3 tasks 
- Describe and model your application
- Specify what can happen in domain
- choose and design he publicly available views of the domain

Based on these tasks, ruby on rails deals with MVC Framework.
The Model View Controller principle divides the work of an application into three separate but closely cooperative subsystems.
1) Model (ActiveRecord) ->
    * It maintains the relationship between the objects and the database and handles validation, association, transactions, and more.
    * Represents the data and the business logic of the application.
    * Directly manages the data, logic, and rules of the application.
    * Responds to requests for information from the view and instructions to update the state (usually from the controller).

2) View (ActionView) ->
    * It is a presentation of data in a particular format, triggered by a controller's decision to present the data. 
    * They are script-based template systems like JSP, ASP, PHP, and very easy to integrate with AJAX technology.
    * Represents the presentation layer of the application.
    * Displays data from the model to the user.
    * Sends user commands to the controller.

3) Controller (ActionController) ->
    * The facility within the application that directs traffic, on the one hand, querying the models for specific data, and on the other hand, organizing that data (searching, sorting, messaging it) into a form that fits the needs of a given view.
    * Acts as an intermediary between Model and View.
    * Receives user input from the view, processes it (e.g., validates, applies business logic), and updates the model accordingly.
    * Updates the view to reflect changes in the model.

      +-------------+
      |  Controller |
      +-------------+
            |
            v
      +-------------+
      |    Model    |
      +-------------+
            |
            v
      +-------------+
      |     View    |
      +-------------+
            |
            v
+-------------------------+
|     User Interaction    |
+-------------------------+



TYPES OF DEVELOPMENT ENVIRNOMENTS:
These environments in Ruby applications help manage different stages of the software development lifecycle effectively, 
ensuring that applications are developed, tested, and deployed with proper configurations and settings for each stage.

1) Development Environment:
Purpose:         Used by developers for coding, testing, and debugging.
Characteristics: Typically runs on local machines or development servers.
Tools:           Includes IDEs (Integrated Development Environments), code editors, debuggers, and local development servers.
Features:        Emphasis on ease of debugging, rapid code iteration, and testing of new features.

2) Testing Environment:
Purpose:         Dedicated to testing functionalities in an environment that mirrors production but without affecting live users.
Characteristics: May involve staging servers or separate instances of the application.
Tools:           Automated testing frameworks, test databases, and tools for simulating user environments.
Features:        Ensures stability, compatibility, and functionality of features before deployment to production.

3) Staging Environment:

Purpose:         Mimics the production environment closely to validate changes before deployment.
Characteristics: Often hosted on servers similar to production servers.
Tools:           Deployment scripts, monitoring tools, and performance testing frameworks.
Features:        Used for final testing, user acceptance testing (UAT), and ensuring readiness for production deployment.

4) Production Environment:
Purpose:         Live environment where the application is accessed by end-users.
Characteristics: Highly optimized for performance, scalability, and security.
Tools:           Load balancers, CDN (Content Delivery Network), production databases, and monitoring tools.
Features:        Emphasis on stability, uptime, and responsiveness to handle live traffic effectively.

5) CI/CD (Continuous Integration/Continuous Deployment) Pipeline:
Purpose:         Automates the process of integrating code changes and deploying them across environments.
Characteristics: Includes build servers, version control systems, and automated testing frameworks.
Tools:           Jenkins, GitLab CI/CD, Travis CI, or other CI/CD tools.
Features:        Ensures rapid and reliable deployment of changes from development through testing to production.

6) QA (Quality Assurance) Environment:
Purpose:         Focuses on thorough testing and quality control of the application.
Characteristics: Includes dedicated resources for testing different aspects of the application.
Tools:           Bug tracking systems, performance testing tools, and regression testing frameworks.
Features:        Ensures that the application meets quality standards and performs as expected across different scenarios.

7)Custom Environments:
Purpose:         Can be created for specific needs or stages in the development lifecycle.
Configuration:   Defined by adding custom environment files (e.g., config/environments/custom_environment.rb).
Characteristics: Tailored settings and configurations to meet unique requirements, such as performance testing, user acceptance testing (UAT), or specialized development needs.

