Rails is a web framework.
Framework is a set of code libraries and data structures that provide generic functionality that can be used , overridden , or further specialized.

There are mainly 3 tasks 
- Describe and model your application
- Specify what can happen in domain
- choose and design he publicly available views of the domain

Based on these tasks, ruby on rails deals with MVC Framework.
The Model View Controller principle divides the work of an application into three separate but closely cooperative subsystems.
1) Model (ActiveRecord) ->
    * It maintains the relationship between the objects and the database and handles validation, association, transactions, and more.
    * Represents the data and the business logic of the application.
    * Directly manages the data, logic, and rules of the application.
    * Responds to requests for information from the view and instructions to update the state (usually from the controller).

2) View (ActionView) ->
    * It is a presentation of data in a particular format, triggered by a controller's decision to present the data. 
    * They are script-based template systems like JSP, ASP, PHP, and very easy to integrate with AJAX technology.
    * Represents the presentation layer of the application.
    * Displays data from the model to the user.
    * Sends user commands to the controller.

3) Controller (ActionController) ->
    * The facility within the application that directs traffic, on the one hand, querying the models for specific data, and on the other hand, organizing that data (searching, sorting, messaging it) into a form that fits the needs of a given view.
    * Acts as an intermediary between Model and View.
    * Receives user input from the view, processes it (e.g., validates, applies business logic), and updates the model accordingly.
    * Updates the view to reflect changes in the model.

      +-------------+
      |  Controller |
      +-------------+
            |
            v
      +-------------+
      |    Model    |
      +-------------+
            |
            v
      +-------------+
      |     View    |
      +-------------+
            |
            v
+-------------------------+
|     User Interaction    |
+-------------------------+



TYPES OF DEVELOPMENT ENVIRNOMENTS:
These environments in Ruby applications help manage different stages of the software development lifecycle effectively, 
ensuring that applications are developed, tested, and deployed with proper configurations and settings for each stage.

1) Development Environment:
Purpose:         Used by developers for coding, testing, and debugging.
Characteristics: Typically runs on local machines or development servers.
Tools:           Includes IDEs (Integrated Development Environments), code editors, debuggers, and local development servers.
Features:        Emphasis on ease of debugging, rapid code iteration, and testing of new features.

2) Testing Environment:
Purpose:         Dedicated to testing functionalities in an environment that mirrors production but without affecting live users.
Characteristics: May involve staging servers or separate instances of the application.
Tools:           Automated testing frameworks, test databases, and tools for simulating user environments.
Features:        Ensures stability, compatibility, and functionality of features before deployment to production.

3) Staging Environment:

Purpose:         Mimics the production environment closely to validate changes before deployment.
Characteristics: Often hosted on servers similar to production servers.
Tools:           Deployment scripts, monitoring tools, and performance testing frameworks.
Features:        Used for final testing, user acceptance testing (UAT), and ensuring readiness for production deployment.

4) Production Environment:
Purpose:         Live environment where the application is accessed by end-users.
Characteristics: Highly optimized for performance, scalability, and security.
Tools:           Load balancers, CDN (Content Delivery Network), production databases, and monitoring tools.
Features:        Emphasis on stability, uptime, and responsiveness to handle live traffic effectively.

5) CI/CD (Continuous Integration/Continuous Deployment) Pipeline:
Purpose:         Automates the process of integrating code changes and deploying them across environments.
Characteristics: Includes build servers, version control systems, and automated testing frameworks.
Tools:           Jenkins, GitLab CI/CD, Travis CI, or other CI/CD tools.
Features:        Ensures rapid and reliable deployment of changes from development through testing to production.

6) QA (Quality Assurance) Environment:
Purpose:         Focuses on thorough testing and quality control of the application.
Characteristics: Includes dedicated resources for testing different aspects of the application.
Tools:           Bug tracking systems, performance testing tools, and regression testing frameworks.
Features:        Ensures that the application meets quality standards and performs as expected across different scenarios.

7)Custom Environments:
Purpose:         Can be created for specific needs or stages in the development lifecycle.
Configuration:   Defined by adding custom environment files (e.g., config/environments/custom_environment.rb).
Characteristics: Tailored settings and configurations to meet unique requirements, such as performance testing, user acceptance testing (UAT), or specialized development needs.



CONVENTIONS OVER CONFIGURATIONS in Active Record --->
When using class names composed of two or more words, the model class name should follow the Ruby conventions, using the CamelCase form, while the table name must use the snake_case form. 

    Examples:
        Model Class - Singular with the first letter of each word capitalized (e.g., BookClub).
        Database Table - Plural with underscores separating words (e.g., book_clubs).

              Model / Class	          Table / Schema
                Article	                articles
                LineItem	            line_items
                Deer	                deers
                Mouse	                mice
                Person	                people



                                             <-------:CREATING NEW RAILS APPLICATION:----->
Rails comes with a number of scripts called generators that are designed to make your development life easier by creating everything that's necessary to start working on a particular task

* Creating new application with default database (sqllite3)
  =>  rails new <application_name>

* if you want different database, then
  => rails new <application_name> -d <database_model_name>
  Example: rails new library_management system -d postgresql



                                    <---------:CONFIGURING DATABASE IN RAILS APPLICATION:----------> 
Configuring database to make the connection of rails with the database present in your system.

For this we have to navigate to :    <application_name>/config/database.yml

default: &default
  adapter: postgresql
  encoding: unicode
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>

development:
  <<: *default
  database: rails_library_development
  username: postgres
  password: 0000
  host: localhost
  port: 5432


                                                <--------:CRUD (READ & WRITE DATA)---------->
                
CRUD is an acronym for the four verbs we use to operate on data: Create, Read, Update and Delete. 
Active Record automatically creates methods to allow an application to read and manipulate data stored within its tables.

1) CREATE:-
    Active Record objects can be created from a hash, a block, or have their attributes manually set after creation
    The new method will return a new object while create will return the object and save it to the database.

    For Example ->
    * Using Create Method:
            user = User.create(name: "Nishchay", occupation: "Web Developer")   

    * Using New Method:
            user = User.new
            user.name = "Nishchay"
            user.occupation = "Web Developer"

    * if a block is provided, both create and new will yield the new object to that block for initialization, 
      while only create will persist the resulting object to the database
            user = User.new do |u|
                u.name = "Nishchay"
                u.occupation = "Web Developer"
            end



2) READ:-
    Active Record provides a rich API for accessing data within a database.

    For Example ->
    * return a collection with all users
        users = User.all
    
    * return the first user
        user = User.first

    * return the first user named Nishchay
        user = User.find_by(name: 'Nishchay')

    * find all users named Nishchay who are Web Developer and sort by created_at in reverse chronological order
        users = User.where(name: 'Nishchay', occupation: 'Web Developer').order(created_at: :desc)


3) UPDATE:-
    Once an Active Record object has been retrieved, its attributes can be modified and it can be saved to the database.

    For Example:
        user = User.find_by(name: 'Nishchay')
        user.name = 'Naman'
        user.save

    * A shorthand for this is to use a hash mapping attribute names to the desired value
            user = User.find_by(name: 'Nishchay')
            user.update(name: 'Naman')

    * If we want to update several records in bulk without callbacks or validations, We can update the database directly using update_all
            User.update_all max_login_attempts: 3, must_change_password: true


4) DELETE:-
    Likewise, once retrieved, an Active Record object can be destroyed, which removes it from the database.

    For Example:
        user = User.find_by(name: 'Nishchay')
        user.destroy

    * find and delete all users named Nishchay
            User.destroy_by(name: 'David')

    * delete all users
            User.destroy_all



                                             <----------:DB commands in RAILS:---------->
                                             
1) rails db:create     -> 
This command creates the database defined in your config/database.yml file.

2) rails db:drop       ->
Drops the database for your current Rails environment.

3) rails db:setup      -> 
        OR
   rails db:prepare 
Creates the database, loads the schema (structure of tables), and initializes with the seed data if you have a db/seeds.rb file.

4) rails db:reset      -> 
Drops the database, creates a new one, loads the schema, and seeds the database.

5) rails db:migrate    ->
Runs all pending migrations to update your database schema.

6) rails db:rollback   -> 
Reverts the last migration.

7) rails db:seed       -> 
Runs the db/seeds.rb file to populate the database with initial data.

8) rails db:version    ->
Displays the current version number of the schema.





======> $ bin/rails generate scaffold article
The command $ bin/rails generate scaffold article is used to quickly generate a complete set of files for a new resource in a Rails application. 
Here's a breakdown of what this command does:

1. Model:->
Generates a model file (app/models/article.rb) with attributes defined in the command (though in this case, no specific attributes are provided).

2. Migration:->
Creates a migration file (db/migrate/[timestamp]_create_articles.rb) to create the articles table in the database with default columns (like id, created_at, updated_at). You can then add or modify columns in this migration file.

3. Controller:->
Generates a controller file (app/controllers/articles_controller.rb) with standard actions (index, show, new, create, edit, update, destroy) and their corresponding view files.

4. Views:->
Creates view files for each of the standard actions in the app/views/articles directory:
index.html.erb: List all articles.
show.html.erb: Display a single article.
new.html.erb: Form to create a new article.
edit.html.erb: Form to edit an existing article.

5. Routes:->
Updates the config/routes.rb file to include RESTful routes for the articles resource.