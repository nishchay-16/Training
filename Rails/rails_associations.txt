                                                    RAILS ASSOCIATIONS

An association is a connection between two Active Record models. 
We need associations between models Because they make common operations simpler and easier in your code.
These associations help in organizing and querying related data efficiently. 

For example, consider a simple Rails application that includes a model for authors and a model for books. Each author can have many books.
With Active Record associations, we can streamline these - and other - operations by declaratively telling Rails that there is a connection between the two models. 
Here's the code for setting up authors and books:

class Author < ApplicationRecord
  has_many :books, dependent: :destroy
end

class Book < ApplicationRecord
  belongs_to :author
end



Here are the key advantages of using associations in Rails:
1) Simplified Data Retrieval:->
    Associations provide methods to easily retrieve related records. For example, with has_many and belongs_to, you can access related objects directly without complex queries.

2) Automatic Joins and Queries:->
    Rails handles database joins and complex queries automatically, saving you from writing raw SQL and ensuring efficient data retrieval.

3) Data Integrity:->
    Associations help maintain data integrity by setting constraints and automatic actions (e.g., dependent: :destroy) that ensure related records are handled properly when a parent record is modified or deleted.

4) Enhanced Readability:->
    Code that uses associations is often more readable and expressive. The relationships between models are clear, making the code easier to understand and maintain.

5) Reduced Boilerplate Code:->
    Associations reduce the amount of boilerplate code needed for managing relationships and performing common operations, leading to cleaner and more concise code.

6) Automatic Foreign Key Management:->
    Rails manages foreign keys and validates relationships, helping to avoid issues related to orphaned records or incorrect foreign key values.

7) Convenient Query Methods:->
    Associations provide built-in query methods that simplify searching and filtering related data, such as where, joins, and includes.

8) Support for Nested Attributes:->
    Associations enable nested attributes, allowing you to create or update associated records in a single operation, which is useful for forms with multiple models.

9) Data Caching:->
    Rails can cache associated records to improve performance, especially when using methods like includes to eager-load related records.

10) Validation Integration:->
    Associations can be used in conjunction with validations to enforce rules about relationships, ensuring that related records are present and valid.


